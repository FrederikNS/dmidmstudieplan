Kravanalyse

Når et program skal skrives er der flere ting som skal overvejes. En af ting der skal gøres klart er hvad der er planlagt at programmet skal indeholde. I dette afsnit vil der blive kigget nærmere på hvilke krav gruppen forventer programmet kan opfylde, og hvordan nogle problemer skal håndteres. Der vil desuden blive overvejet mulige løsninger i nogle situationer.


Overordnede krav

Sådan de helt overordnede krav til programmet, er selvfølgelig at det kan de basale ting omkring det at lave en studieplan. Tilføje og fjerne fra et skema er nogle af de basale funktioner, samt at vise planen. Desuden skal programmet også kunne give en smule hjælp, men det bliver nok mest til hvilke funktioner der findes og om man får tastet noget forkert ind (et ikke eksisterende kursusnummer, bare for at tage et eksempel). Et udprint af hvilke kurser der er i databasen ville også være praktisk når studieplanen skal laves, så sådanne funktion skal den også have. Desuden, så ville det også være praktisk hvis man kunne gemme sin studieplan, så der er mulighed for at arbejde videre på den en anden dag, og hente den frem igen.

I opgaven er der givet nogle forenklinger i forhold til kravene, nemlig at der i første omgang ikke skal tilføjes 3-ugers perioder. Dernæst, de kurser som har nogle forudsætninger, de kan i virkeligheden blive taget samtidig. I programmet er det ikke nødvendigt at tage højde for det. De kurser som strækker sig over 2 semestre, der må brugeren selv tilføje dem begge manuelt. Og til sidst, de kurser som tilbydes både forår og efterår, der må brugeren selv sørge for det kun er placeret en gang i studieplanen.


Mere specifikke krav

Bliver der kigget nærmere på hvad programmet skal kunne, så er der flere ting at tænke på. Til opgaven er der givet 3 filer som udgører kursusdatabasen. Disse filer er ikke bygget helt praktisk op, og vil volde nogle problemer. For eksempel der er i filen med kursusnumre og navne lavet mellemrum ikke bare mellem kursusnavn og nummer, men også inde i selve navnene. Dette gør at det ikke bare er muligt, at lave en split i forhold til mellemrum. Gør man det, så vil man få en collection hvor navnet, for nogle kurser, er splittet over flere pladser i collection. Vi benytter Regular Expression til at søge igennem databasefilerne, da det, i vores øjne, vil håndtere filerne bedre. Det vil være lettere end selv at dele hver linie op i mindre strings og teste dem, for om de er en del af navnet eller nummeret.
   Til selve databasen, der benytter vi et arraylist. Man kunne også have benyttet et map (for eksempel, HashMap). Det ville have været meget mere praktisk, men vi menes at kunne huske, der er blevet sagt eller skrevet vi IKKE må benytte maps (dog kan vi ikke finde det).  For at være på den sikre side, så benytter vi en arraylist.
   En ting som vil gå op for en når man læser selve opgaven, så fremgår det lidt at der er en class (Kontrol) som foretager alle kontrol af input. Vi har valgt en anden form. Hos os, der bliver al kontrol lavet i dialog classen, som er den der vil foretage alt omkring “samtale” med brugeren. Det er også den som vil foretage alle checks at input og derefter sende det videre i systemet. Dialog vil komme til at extende en anden class (ui, eller hvad den kommer til at hedde) så vi får en eller anden standartiseret struktur. Det vil gøre, at vi kan lave en ny dialog-lignende class som vi vil kunne sætte ind istedet for Dialog, og så vil det stadig fungere. Det vil sikre en svag kobling mellem den class som står for interface og resten af systemet. Vores plan er at lave den udskiftelig, og hvis der er tid, flere interfaces som man kan skifte imellem. Alle interfaces vil have hver deres måde at arbejde på, og været struktureret på forskellig vis. For at sikre at resten af systemet ikke skal tage højde for alt for mange måder at få input på, så er det smartest at checks ligger i interface-class (i vores tilfælde, dialog).


Fejlhåndtering

Bliver der kigget nærmere på fejlhåndtering, så er der flere mulige problemer der vil springe i øjnene. Nogle af problemerne ligger omkring de forskellige kommandoer.
   Ved flere af kommandoerne, der bliver det krævet man taster data rigtigt. For eksempel ved både tilføj og fjern kursus, der skal man taste et specifikt kursusnummer for at kurset bliver fjernet/tilføjet. Der har gruppen valgt at der bliver kørt nogle checks. I de checks, der bliver der testet om det givne input for kursusnummer kan laves om til en integer (alle kursusnumre er tal) og om længden af kursusnummeret er 5. Ved de kurser (tilføj og visplan) hvor der kan indtastet hvilket semesternummer det er, der vil også blive kørt nogle checks. Nemlig, om det kan laves om til en integer, og om tallet er mellem 1 og 20. Gruppen antager, at folk bliver smidt ud efter at have studeret i 10 år uden at afslutte uddannelsen.
   Fejler nogle af disse checks, vil man blive bedt om at indtaste kursus eller semester nummer igen.
   Ved kommandoen visplan, der har gruppen besluttet at den også skal kunne vise hvilket årstid det er. Visplan får givet et semesternummer, og derfra kan den vise hvilke kurser der ligger på hvilke dage/tidspunkter. Den viser desuden hvilket semester det er for og hvilken årstid. For at det er muligt, så har gruppen antaget, at de studerende KUN starter om efteråret.
   Ved kommandoerne gem vil man blive bedt om et navn man vil gemme sin plan under. Det navn er det samme man skal bruge når man vil finde sin plan igen. Indtaster man et ikke eksisterende navn, vil programmet bede en om at skrive et.

Kigger vi nærmere på hvad der er planlagt omkring fejlhåndtering, så skal det primært foregå ved exceptions. Exceptions giver os mulighed for at redde programmet ved de mere fatale fejl. Hvis vi, for eksempel, får IOExceptions vil det normalt ligge programmet ned, og give en grim liste over fejlen. Sådan som vi har valgt at opbygge programmet, der er alle vores exceptions checked. Det vil sige, det er exceptions der vil komme under diverse checks. Hvis nu en RuntimeException vil dukke op, som der ikke er taget højde for, så vil væres core (mere forklaring om classes senere) catche alle exceptions.

En helt generelt fejl vi nok vil løbe ind i, er charset. Hele gruppen arbejder i linux, og det benytter UTF-8. Åbner man det i windows, så vil alle æøå blive sjove tegn. Derfor er vi nød til at antage man kun arbejder i linux.


Krav til 3-mands grupper

Siden gruppen består af 3 personer, så skal der også kigget på hvilke krav der yderligere kommer til.
   Der er planer om at indføre i programmet, så man også kan planlægge 3-ugers perioden (3-mands krav, punkt 12). Siden vi i forvejen har planlagt at bruge regular expression,  så skulle det være enkelt nok at tilføje 3-ugers perioderne. Vi laver en antagelse om at kurser der ligges i 13-ugers perioden også kan ligge i 3-ugers perioden (det vil sige, fag som Ingeniørarbejde kan kun forekomme i en af perioderne). I teorien er det muligt, men vi antager der ikke er.
   Det næste krav vi vælger at inddrage, er en omstrukturering af databasen (punkt 13). Dette vil det gøre mere overskueligt, plus det vil hjælpe os. I en planlagt søgefunktion der ville det gamle design skabe problemer. Det ville kun returnere den første linie med faget og undlade det andet. Med dette krav, så vil det hele stå på en linie og derved vi alle info om faget blive skrevet under søgningen.
   Det sidste vi vælger at inddrage fra 3-mands krav listen er håndtering af flere studieplaner (punkt 20). Vores core vil holde styr på alle de aktive studieplaner.